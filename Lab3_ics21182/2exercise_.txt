2.1 Για τον παραλληλισμό του κώδικα θα μπρούσαμε να δουμε το τμήμα κωδικα που εκτελεί έλεγχο 
για ολες τις πιθανές εισόδους, μπορεί να γίνει παράλληλα για διαφορετικούς συνδυασμούς εισόδου 
και κάθε συνδιασμός θα είναι ξεχωριστος και ανεξαρτητος απο τους άλλους.
Το κριτήριο του παραλληλισμού για το parallel_for είναι ότι οι επαναλήψης του βρόγχου
πρέπει να είναι ανεξάρτητες μεταξύ τους,δηλαδή δεν υπάρχει θέμα αν μια επαναληψη αρχίζει 
ενω εκτελείται μια άλλη επαναληψη, ειναι κατάλληλος για παραλληλισμό αγου κάθε επαναληψη
του βρόγχου αντιστοιχεί σε έναν διαφορετικό συνδυασμό εισόδου, άρα το τμήμα κώδικα που μπορεί
παραλληλιστεί ειναι η μέθοδος check_circuit,κάθως ελέγχει την εκτέλεση για όλους τους δυνατούς 
συνδυασμούς εισόδων, αφου κάθε νημα θα εκτελεί μια διαφορετική επαναλήψη του βρόγχου
έλεγχοντας έναν διαφορετικό συνδυασμό εισόδου. 

2.2 
    function parallel_for(start_index, end_index, chunk_size):
		if(end_index - start_index) <= chunk_size: 
			// if the segment size is < than the limit it is executed serially
			for i from start_index to end_index:
				process_element(i)
		else:
			//dividing the scope of work into smaller sections
			mid_index = (start_index + end_index) / 2
			
			//create new sub-tasks (threads) for the 2 sub-tasks
			fork:
				parallel_for(start_index, mid_index, chunk_size)
				parallel_for(mid_index + 1, end_index, chunk_size)
				
			// we wait until all sub-tasks are done
			join:
				wait_for_all_threads_to_finish()
				

2.3
Έστω ότι έχουμε N επαναλήψης και Μ πυρήνες επεξεργαστή.
Στην ακολουθιακή εκτέλεση, ο συνολικός χρόνος εκτέλεσης θα είναι ίσος με τον χρόνο που 
χρειάζεται για να ολοκληρωθούνε όλες οι επαναλήψης αντίθετα στην παραλληλη εκτέλεση
ο συνολικός χρόνος θα εξαρτηθέι απο το πόσους πυρηνες έχουμε διαθέσιμους ας υποθέσουμε 
οτι έχουμε 4 πυρήνες στον επεξεργαστή μας θα χωρισουμε το σύνολο των εργασιών σε τέσσερα
τμήματα και θα αναθέσουμε σε κάθε τμημα σε έναν διαφορετικό πυρήνα τότε ο χρόνος εκτελεσης 
θα ειναι ο μεγιστος χρόνος απο τους χρονους δηλαδη
εστω τμημα1:100ms τμημα2:120ms τμημα3:90ms και τμημα4:110ms 
τότε ο συνολικός χρόνος της παραλληλης εκτελεσης θα είναι 120 ms.

2.4 
Εχει παραδωθεί σε project 

2.5 απο 900-1000 ms που ήταν οι αναμενόμενοι χρόνοι μετα την υλοποιήση του 2.4 φτάσαμε 
σε 500 εως 600 ms αφου κάναμε κάποιους πειραματισμούς και είδαμε ότι υπάρχει βελτίωση περίπου 
τους ίδιους χρόνους και λίγο λιγότερους η SetPixels ενώ η SimpleSat είχε στο περίπου 1000 ms 
λιγότερο χρόνο εκτέλεσης περίπου στο 9000.
